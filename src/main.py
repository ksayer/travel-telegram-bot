import telebot
from decouple import config
from src.botrequests import lowprice
from src.botrequests import highprice
from src.botrequests import bestdeal
from telebot import types
from src.botrequests import history
import configs
from typing import List

RAPIDAPI_KEY = config('RAPIDAPI_KEY')
BOT_TOKEN = config('TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)
headers: dict = {
    'x-rapidapi-host': "hotels4.p.rapidapi.com",
    'x-rapidapi-key': RAPIDAPI_KEY
}


@bot.message_handler(commands=['restart'])
def restart(message: types.Message) -> None:
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ.
    """
    if not history.check_completed(message.chat.id):
        history.delete_last_story(message.chat.id)
    send_welcome(message)


@bot.message_handler(commands=['help'])
def send_help(message: types.Message) -> None:
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É help
    """
    bot.send_message(message.chat.id, "\n/lowprice - –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ"
                                      "\n/highprice - –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ"
                                      "\n/bestdeal - –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞"
                                      "\n/history - –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π"
                                      "\n/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")


@bot.message_handler(commands=['start'])
def send_welcome(message: types.Message) -> None:
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
    """
    bot.send_sticker(message.chat.id, configs.hello())
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª—å –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
                                      "\n/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞"
                                      "\n/lowprice - –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ"
                                      "\n/highprice - –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ"
                                      "\n/bestdeal - –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞"
                                      "\n/history - –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π"
                                      "\n/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")


@bot.message_handler(commands=['lowprice'])
def send_low_price_hotels(message: types.Message) -> None:
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É lowprice
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –æ—Ç–µ–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä–æ–¥–∞ –≤ API hotels

    date_create - –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–æ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ
    –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å id_user(–±–µ—Ä–µ—Ä–µ–º –∏–∑ message –≤ –∫–∞–∂–¥–æ—ã–π —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å) - –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è
    –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ë–î.
    """
    id_user: int = message.from_user.id
    date_create: str = history.create_user(id_user, 'lowprice')

    city = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:')
    bot.register_next_step_handler(city, check_city, date_create)


@bot.message_handler(commands=['highprice'])
def send_high_price_hotels(message: types.Message) -> None:
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É highprice
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –æ—Ç–µ–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä–æ–¥–∞ –≤ API hotels

    date_create - –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–æ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ
    –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å id_user(–±–µ—Ä–µ—Ä–µ–º –∏–∑ message –≤ –∫–∞–∂–¥–æ—ã–π —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å) - –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è
    –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ë–î.
    """
    id_user: int = message.from_user.id
    date_create: str = history.create_user(id_user, 'highprice')

    city = bot.send_message(message.chat.id, '–ì–¥–µ –∏—â–µ–º?')
    bot.register_next_step_handler(city, check_city, date_create)


@bot.message_handler(commands=['bestdeal'])
def send_bestdeal_hotels(message: types.Message) -> None:
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É bestdeal
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –æ—Ç–µ–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä–æ–¥–∞ –≤ API hotels

    date_create - –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–æ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ
    –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å id_user(–±–µ—Ä–µ—Ä–µ–º –∏–∑ message –≤ –∫–∞–∂–¥–æ—ã–π —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å) - –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è
    –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ë–î.
    """
    id_user: int = message.from_user.id
    date_create: str = history.create_user(id_user, 'bestdeal')

    city = bot.send_message(message.chat.id, '–ì–¥–µ –∏—â–µ–º?')
    bot.register_next_step_handler(city, check_city, date_create)


@bot.message_handler(commands=['history'])
def send_history(message: types.Message) -> None:
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É history
    –í—ã–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö number_stories(—á–∏—Å–ª–æ –∑–∞–¥–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ configs.py) –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏—Å—Ç–æ—Ä–∏—è).
    –ü—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ history.send_history(message.chat.id) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
    —Å–ø–∏—Å–∫–æ–≤ —Å—Ç—Ä–æ–∫(–ö–∞–∂–¥—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (story) —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ - –∫–æ–º–∞–Ω–¥—É, –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    –≤ –ë–î, –≥–æ—Ä–æ–¥(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ(—á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤
    —Ñ—É–Ω–∫—Ü–∏—é show_result)
    –í data –º—ã –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "history", —á—Ç–æ–±—ã handler –ø–æ–Ω—è–ª, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –∏–Ω—Ñ–∞.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ –¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å—ã —Ç–æ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
    """
    hist: List[str] = history.send_history(message.chat.id)
    if hist:
        bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã : '.format(len(hist)))
        for story in hist:
            restart_button = types.InlineKeyboardMarkup()
            data: str = ''.join([story[-1], 'history'])
            button = types.InlineKeyboardButton(text='üîÑ  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å', callback_data=data)
            restart_button.add(button)
            bot.send_message(message.chat.id, ''.join(story[:-1]), reply_markup=restart_button)
    else:
        bot.send_message(message.chat.id, '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.')


def check_city(message: types.Message, date_create: str) -> None:
    """
    –ü–∞—Ä—Å–∏–º –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤—Å–µ—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API
    –í cities —É –Ω–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ [[full_city_name, id_city], [full_city_name, id_city], [full_city_name, id_city]..]
    –í callback –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞–µ–º id –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ date_create
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î(—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥ –∏ id), —á—Ç–æ–±—ã –≤ call_back_handler –ø–æ id –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–µ–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–≤–µ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    :param date_create: –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
    :param message: –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥
    """
    if message.text == '/restart':
        restart(message)

    else:
        city: str = message.text
        cities: List[List[str]] = lowprice.check_city(city)
        cities_button = types.InlineKeyboardMarkup()

        if not cities:
            bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            command = history.get_command(message.chat.id, date_create)
            history.delete_last_story(message.chat.id)
            if command == 'lowprice':
                send_low_price_hotels(message)
            elif command == 'highprice:':
                send_high_price_hotels(message)
            else:
                send_bestdeal_hotels(message)
        else:
            for city in cities:
                history.create_city(city[0], city[1])

                data: str = '|'.join([city[1], date_create])
                text = '‚ùìÔ∏è{}'.format(city[0])
                button = types.InlineKeyboardButton(text=text, callback_data=data)
                cities_button.add(button)

            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=cities_button)


@bot.callback_query_handler(func=lambda call: True)
def answer(call: types.CallbackQuery) -> None:
    """
    –õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É!
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ history, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–≤–æ–¥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏,
    —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ–º 7 —Å–∏–º–≤–æ–ª–æ–≤ (history)
    –∏ –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ë–î.
    –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º –∂–µ —Å–ª—É—á–∞–µ:
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤ –ë–î (id –∏ –∏–º—è) –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–ª-–≤–∞ –æ—Ç–µ–ª–µ–π
    –í –∑–∞–≤–∏–º–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    """
    if call.data.endswith('history'):
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
        show_result(call.message.chat.id, call.data[:-7])
    else:
        data: List[str] = call.data.split('|')
        date_create: str = data[1]
        id_city: str = data[0]

        city: str = history.get_city(id_city)
        text: str = '–¢—ã –≤—ã–±—Ä–∞–ª:\n{}'.format(city)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text)
        history.set_city_user(id_city, city, call.message.chat.id, date_create)

        if history.get_command(call.message.chat.id, date_create) == 'bestdeal':
            ask_price(call.message.chat.id, date_create)
        else:
            ask_number_hotels(call.message.chat.id, date_create)


def ask_price(id_user: int, date_create: str) -> None:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω.
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    :param id_user: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param date_create: –î–∞—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    user_price: types.Message = bot.send_message(id_user, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–≤ —Ä—É–±–ª—è—Ö, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª), '
                                                          '–Ω–∞–ø—Ä–∏–º–µ—Ä - "500 2500" ')
    bot.register_next_step_handler(user_price, ask_distance, date_create)


def ask_distance(message: types.Message, date_create: str) -> None:
    """
    –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω (–º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º), –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–æ -
    –ª–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ –ë–î
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    :param date_create: –î–∞—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param message: –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.text == '/restart':
        restart(message)
    else:
        try:
            prices: List[str] = message.text.split(' ')
            history.set_price(prices, message.chat.id, date_create)

            user_distance: types.Message = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ '
                                                                             '–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª), '
                                                                             '–Ω–∞–ø—Ä–∏–º–µ—Ä - "0.5 2"')
            bot.register_next_step_handler(user_distance, check_distance, date_create)
        except (IndexError, SyntaxError, ValueError):
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            ask_price(message.chat.id, date_create)


def check_distance(message: types.Message, date_create: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–æ–ª-–≤–∞ –æ—Ç–µ–ª–µ–π
    :param date_create: –î–∞—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param message: –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    """
    if message.text == '/restart':
        restart(message)
    else:
        try:
            distances: List[str] = message.text.split(' ')
            history.set_distance(distances, message.chat.id, date_create)
            ask_number_hotels(message.chat.id, date_create)
        except (IndexError, SyntaxError, ValueError):
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. ')
            user_distance: types.Message = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ '
                                                                             '–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª), '
                                                                             '–Ω–∞–ø—Ä–∏–º–µ—Ä - "0.5 2"')
            bot.register_next_step_handler(user_distance, check_distance, date_create)


def ask_number_hotels(id_user: int, date_create: str) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –∫–æ–ª-–≤–∞ –æ—Ç–µ–ª–µ–π
    –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ 9 –∫–Ω–æ–ø–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    :param date_create: –î–∞—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param id_user: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                         resize_keyboard=True,
                                         input_field_placeholder='–Ω–µ –±–æ–ª–µ–µ 9 –æ—Ç–µ–ª–µ–π')
    keyboard.row('1', '2', '3')
    keyboard.row('4', '5', '6')
    keyboard.row('7', '8', '9')
    count_of_hotels: types.Message = bot.send_message(id_user, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç?',
                                                      reply_markup=keyboard)

    bot.register_next_step_handler(count_of_hotels, ask_photo, date_create)


def ask_photo(message: types.Message, date_create: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ(—Ñ–∞–π–ª configs.py), —Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º.
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω—ã –ª–∏ –µ–º—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, —Ç–æ –µ–≥–æ –≤–µ—Ä–Ω–µ—Ç –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª-–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    :param date_create: –î–∞—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param message: –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π, –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    if message.text == '/restart':
        restart(message)
    else:
        try:
            count_of_hotels: int = int(message.text)
            if count_of_hotels > configs.count_of_hotels:
                count_of_hotels: int = configs.count_of_hotels
            history.set_count_of_hotels(message.chat.id, count_of_hotels, date_create)

            keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                                 resize_keyboard=True,
                                                 input_field_placeholder='–¥–∞/–Ω–µ—Ç')
            keyboard.row('–¥–∞', '–Ω–µ—Ç')
            photo_desire: types.Message = bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª–µ–π?',
                                                           reply_markup=keyboard)
            bot.register_next_step_handler(photo_desire, ask_number_photo, date_create)
            types.ReplyKeyboardRemove()
        except ValueError:
            bot.reply_to(message, '–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            ask_number_hotels(message.chat.id, date_create)


def ask_number_photo(message: types.Message, date_create: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ï—Å–¥–∏ –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–≤–æ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    –µ—Å–ª–∏ –¥–∞ - —Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–∫–∞–∑–∞—Ç—å, –ø–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–≤–æ–¥–∞ –∏–∑ 6 —Ü–∏—Ñ—Ä.
    –í –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞–∏–π –∏ –Ω—É–∂–Ω—ã –ª–∏ –æ–Ω–∏.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ –¥–∞/–Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–≤–æ–¥–∞ –∫–æ–ª-–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    :param date_create: –î–∞—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param message: –æ—Ç–≤–µ—Ç –Ω–∞ "—Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?"
    """
    if message.text == '/restart':
        restart(message)
    else:
        if message.text.lower() == '–Ω–µ—Ç':
            history.set_photo(message.chat.id, False, date_create)
            history.set_count_of_photo(message.chat.id, 0, date_create)
            show_result(message.chat.id, date_create)
        elif message.text.lower() == '–¥–∞':
            history.set_photo(message.chat.id, True, date_create)
            keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                                 resize_keyboard=True,
                                                 input_field_placeholder='–Ω–µ –±–æ–ª–µ–µ 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
            keyboard.row('1', '2', '3')
            keyboard.row('4', '5', '6')
            number_photo: types.Message = bot.reply_to(message, '–°–∫–æ–ª—å–∫–æ?', reply_markup=keyboard)
            bot.register_next_step_handler(number_photo, check_count_of_photo, date_create)
        else:
            photo_desire: types.Message = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"')
            bot.register_next_step_handler(photo_desire, ask_number_photo, date_create)


def check_count_of_photo(message: types.Message, date_create: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–ª-–≤–∞ —Ñ–æ—Ç–æ—Ä–≥—Ä–∞—Ñ–∏–π.
    –°–ª–æ–∂–Ω–æ—Å—Ç—å —É—Å–ª–æ–≤–∏—è –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –±—ã –Ω–µ –±—ã–ª–æ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–∞—á–∞–ª–∞ —Å–∫–∞–∑–∞–ª —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω—É–∂–Ω—ã, –ø–æ—Ç–æ–º
    –Ω–∞—á–∞–ª –≤–≤–æ–¥–∏—Ç—å –Ω–µ —Ü–∏—Ñ—Ä—ã, –µ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –∫–∏–¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –∞ –ø–æ—Ç–æ–º –æ–Ω –≤–≤–æ–¥–∏—Ç "–Ω–µ—Ç". –ò –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ø—Ä–æ—â–µ, —Ç–æ –≤
    —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –µ–º—É –Ω–µ –Ω—É–∂–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –Ω–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ—Ä–æ–∂–µ –≤—Ç–æ—Ä–æ–≥–æ.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ –±–æ–ª—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ(—Ñ–∞–π–ª configs.py), —Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º –µ–≥–æ
    :param message: –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    :param date_create: –î–∞—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :return:
    """
    if message.text == '/restart':
        restart(message)
    else:
        count_of_photo: str = message.text

        if (count_of_photo.isdigit() and history.get_photo(message.chat.id, date_create)) or \
                (count_of_photo == '–Ω–µ—Ç' and not history.get_photo(message.chat.id, date_create)):

            if count_of_photo.isdigit() and int(count_of_photo) > configs.count_of_photo:
                count_of_photo = configs.count_of_photo

            history.set_count_of_photo(message.chat.id, count_of_photo, date_create)
            show_result(message.chat.id, date_create)
        else:
            number_photo: types.Message = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
            bot.register_next_step_handler(number_photo, check_count_of_photo, date_create)


def show_result(id_user: int, date_create: str) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å–∏ –µ–≥–æ –≤ –ë–î –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã—Ö,
    –∞ –ø–æ—Ç–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –ë–î
    –í –≤—ã–≤–æ–¥–µ –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–µ–ª—é –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    :param date_create: –î–∞—Ç–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param id_user: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    bot.send_sticker(id_user, configs.wait())
    bot.send_message(id_user, '–ú–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.',
                     reply_markup=types.ReplyKeyboardRemove())
    if history.get_command(id_user, date_create) == 'lowprice':
        lowprice.get_hotels_info(id_user, date_create)
    elif history.get_command(id_user, date_create) == 'highprice':
        highprice.get_hotels_info(id_user, date_create)
    else:
        bestdeal.get_hotels_info(id_user, date_create)

    hotels: List[dict] = history.get_hotels(id_user, date_create)

    for hotel in hotels:

        if history.get_photo(id_user, date_create):
            media_group: List[types.InputMediaPhoto] = history.create_media_group(hotel['photo'])
            bot.send_media_group(id_user, media_group)

        link_booking = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='üè®   –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä', url=hotel['booking'])
        link_booking.add(button)

        bot.send_message(id_user, '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {name}\n'
                                  '–ê–¥—Ä–µ—Å: {address}\n'
                                  '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {dist}\n'
                                  '–¶–µ–Ω–∞: {price}'.format(name=hotel['name'],
                                                         address=hotel['address'],
                                                         dist=hotel['distance_to_center'],
                                                         price=hotel['price']),
                         reply_markup=link_booking)

    if not hotels:
        bot.send_sticker(id_user, configs.fail_searching())
    else:
        bot.send_sticker(id_user, configs.good_search())
    bot.send_message(id_user, '–ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π: {}'.format(len(hotels)))


@bot.message_handler(func=lambda message: True)
def not_understand(message: types.Message):
    bot.send_sticker(message.chat.id, configs.misunderstand())
    bot.reply_to(message, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏")


if __name__ == '__main__':
    bot.infinity_polling()
